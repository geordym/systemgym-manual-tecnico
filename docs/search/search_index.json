{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Manual T\u00e9cnico del Sistema SystemGYM","text":"<p>Este es el manual t\u00e9cnico del sistema SystemGYM, donde encontrar\u00e1s informaci\u00f3n detallada para desplegar y configurar el sistema seg\u00fan las necesidades del gimnasio y los requerimientos del usuario. El manual incluye instrucciones paso a paso para la instalaci\u00f3n, configuraci\u00f3n, uso y mantenimiento del sistema.</p> <p>Este manual fue desarrollado por los estudiantes de la formaci\u00f3n An\u00e1lisis y Desarrollo de Sistemas de Informaci\u00f3n (ADSO) del SENA, ficha 2675809, como parte del proyecto productivo del SENA.</p> <p>Agradecemos la lectura de este manual, que ha sido desarrollado con dedicaci\u00f3n por los siguientes estudiantes:</p>"},{"location":"#proyecto-systemgym","title":"Proyecto: SystemGYM","text":"<p>Integrantes:</p> <ul> <li> <p>Geordy Montenegro C\u00e9dula: 1018522721</p> </li> <li> <p>Andr\u00e9s Jim\u00e9nez C\u00e9dula: 1113662914</p> </li> <li> <p>Juniors Puello C\u00e9dula: 1022393824</p> </li> <li> <p>Jesus David C\u00e9dula: 1081274111</p> </li> <li> <p>Johan Stiven Paez Roa C\u00e9dula: 1012389247</p> </li> </ul>"},{"location":"arquitectura/","title":"Arquitectura del sistema","text":""},{"location":"arquitectura/#arquitectura-del-sistema","title":"Arquitectura del Sistema","text":""},{"location":"arquitectura/#diagrama-de-arquitectura","title":"Diagrama de Arquitectura","text":""},{"location":"arquitectura/#descripcion-de-componentes-principales","title":"Descripci\u00f3n de Componentes Principales","text":"<ol> <li>Frontend (Angular)</li> <li>Descripci\u00f3n: La interfaz de usuario desarrollada en Angular. Permite a los usuarios interactuar con el sistema a trav\u00e9s de un navegador web.</li> <li> <p>Responsabilidades: </p> <ul> <li>Mostrar la informaci\u00f3n al usuario.</li> <li>Enviar solicitudes al backend para obtener o enviar datos.</li> <li>Gestionar la autenticaci\u00f3n y autorizaci\u00f3n del usuario.</li> </ul> <p></p> </li> <li> <p>Backend (Spring Boot)</p> </li> <li>Descripci\u00f3n: La l\u00f3gica del servidor, desarrollada en Spring Boot. Se encarga de procesar las solicitudes del frontend y manejar la l\u00f3gica de negocio.</li> <li> <p>Responsabilidades: </p> <ul> <li>Exponer APIs RESTful para la comunicaci\u00f3n con el frontend.</li> <li>Gestionar la base de datos y la l\u00f3gica de negocio.</li> <li>Implementar la autenticaci\u00f3n y autorizaci\u00f3n utilizando JWT.</li> <li>Integrar con servicios externos, como SMTP para enviar correos electr\u00f3nicos.</li> </ul> </li> <li> <p>Base de Datos (MySQL)</p> </li> <li>Descripci\u00f3n: El sistema de gesti\u00f3n de bases de datos utilizado para almacenar la informaci\u00f3n del sistema.</li> <li> <p>Responsabilidades:</p> <ul> <li>Almacenar datos relacionados con usuarios, membres\u00edas, facturas, etc.</li> <li>Soportar consultas y operaciones transaccionales.</li> </ul> </li> <li> <p>Servicio de Env\u00edo de Correos (SMTP Gmail)</p> </li> <li>Descripci\u00f3n: Servicio utilizado para enviar correos electr\u00f3nicos desde el sistema.</li> <li> <p>Responsabilidades:</p> <ul> <li>Enviar notificaciones y facturas por correo electr\u00f3nico.</li> </ul> </li> <li> <p>Impresora T\u00e9rmica</p> </li> <li>Descripci\u00f3n: Dispositivo utilizado para imprimir tickets y recibos.</li> <li>Responsabilidades:<ul> <li>Imprimir recibos de pagos y otros documentos relacionados.</li> </ul> </li> </ol>"},{"location":"configuracion/","title":"Configuracion","text":""},{"location":"configuracion/#configuracion-del-entorno","title":"Configuraci\u00f3n del Entorno","text":"<ol> <li>Angular</li> <li> <p>APIURL: En el archivo de configuraci\u00f3n de Angular, define la URL base del backend.</p> <ul> <li>Abre el archivo <code>src/environments/environment.ts</code>.</li> <li>Configura la URL del API:    <code>typescript    export const environment = {      production: false,      apiUrl: 'http://localhost:8080/api'    };</code></li> </ul> </li> <li> <p>Spring Boot</p> </li> <li>Archivo de Configuraci\u00f3n: El archivo de configuraci\u00f3n se encuentra en <code>src/main/resources/application.properties</code></li> </ol>"},{"location":"configuracion/#configuracion-del-sistema","title":"Configuraci\u00f3n del Sistema","text":"<ol> <li>Base de Datos</li> <li>URL: La URL de la base de datos MySQL.      ```properties<ul> <li>spring.datasource.url=jdbc:mysql://localhost:3306/sistema_gimnasio?createDatabaseIfNotExist=true  ```</li> </ul> </li> <li> <p>Credenciales: Usuario y contrase\u00f1a de la base de datos.      ```properties</p> <ul> <li>spring.datasource.username=root</li> <li>spring.datasource.password=  ```</li> </ul> </li> <li> <p>Servicios Externos</p> </li> <li> <p>SMTP para Email (Gmail)</p> <ul> <li>Configura las credenciales de Gmail para el env\u00edo de correos.  ```properties</li> <li>smtp.gmail.user=</li> <li>smtp.gmail.password=  ```</li> </ul> </li> <li> <p>Migraci\u00f3n de Base de Datos (Flyway)</p> <ul> <li>spring.flyway.enabled=true</li> <li>spring.flyway.locations=classpath:db/migration</li> <li>spring.flyway.url=jdbc:mysql://localhost:3306/sistema_gimnasio</li> <li>spring.flyway.user=root</li> <li>spring.flyway.password=</li> <li>spring.flyway.group=true</li> <li>spring.flyway.clean-disabled=true</li> <li>spring.flyway.validate-on-migrate=true</li> <li>logging.level.org.flywaydb=debug  ```</li> </ul> </li> <li> <p>Documentaci\u00f3n API (Swagger)</p> </li> <li>Habilitar Swagger UI      ```properties<ul> <li>springdoc.api-docs.enabled=true</li> <li>springdoc.swagger-ui.enabled=true</li> <li>springdoc.swagger-ui.path=/doc/swagger-ui.html  ```</li> </ul> </li> </ol>"},{"location":"configuracion/#variables-de-entorno-y-archivos-de-configuracion","title":"Variables de Entorno y Archivos de Configuraci\u00f3n","text":"<ol> <li>Variables de Entorno</li> <li> <p>Angular</p> <ul> <li><code>APIURL</code>: Configurado en <code>src/environments/environment.ts</code>.</li> </ul> </li> <li> <p>Spring Boot</p> <ul> <li><code>spring.jpa.hibernate.ddl-auto=none</code></li> <li><code>spring.datasource.url=jdbc:mysql://localhost:3306/sistema_gimnasio?createDatabaseIfNotExist=true</code></li> <li><code>spring.datasource.username=root</code></li> <li><code>spring.datasource.password=</code></li> <li><code>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></li> <li><code>spring.jpa.show-sql=true</code></li> <li><code>spring.flyway.enabled=true</code></li> <li><code>spring.flyway.locations=classpath:db/migration</code></li> <li><code>spring.flyway.url=jdbc:mysql://localhost:3306/sistema_gimnasio</code></li> <li><code>spring.flyway.user=root</code></li> <li><code>spring.flyway.password=</code></li> <li><code>spring.flyway.group=true</code></li> <li><code>spring.flyway.clean-disabled=true</code></li> <li><code>spring.flyway.validate-on-migrate=true</code></li> <li><code>logging.level.org.flywaydb=debug</code></li> <li><code>springdoc.api-docs.enabled=true</code></li> <li><code>springdoc.swagger-ui.enabled=true</code></li> <li><code>springdoc.swagger-ui.path=/doc/swagger-ui.html</code></li> <li><code>smtp.gmail.user=</code></li> <li><code>smtp.gmail.password=</code></li> </ul> </li> </ol>"},{"location":"desarrollo_mantenimiento/","title":"Desarrollo y mantenimiento","text":""},{"location":"desarrollo_mantenimiento/#estructura-del-codigo-fuente","title":"Estructura del C\u00f3digo Fuente","text":""},{"location":"desarrollo_mantenimiento/#frontend-angular","title":"Frontend (Angular)","text":"<ol> <li>Estructura de Directorios</li> <li><code>src/pages/</code><ul> <li>Contiene las p\u00e1ginas del sistema, como:</li> <li><code>factura/</code></li> <li><code>inscripcion/</code></li> <li><code>membresias/</code></li> </ul> </li> <li><code>src/services/</code><ul> <li>Contiene los servicios para interactuar con el backend, como:</li> <li><code>facturaService/</code></li> <li><code>authService/</code></li> </ul> </li> <li><code>src/interfaces/</code><ul> <li>Define las interfaces utilizadas en el sistema, como:</li> <li><code>Factura/</code></li> <li><code>Pago/</code></li> <li><code>Cliente/</code></li> </ul> </li> <li> <p><code>src/app.routing.module.ts</code></p> <ul> <li>Configura las rutas del sistema para la navegaci\u00f3n entre p\u00e1ginas.</li> </ul> </li> <li> <p>Plantilla AdminLTE</p> </li> <li>Carpeta adicional para los archivos relacionados con la plantilla AdminLTE, utilizados para la interfaz de usuario.</li> </ol>"},{"location":"desarrollo_mantenimiento/#backend-spring-boot","title":"Backend (Spring Boot)","text":"<ol> <li>Estructura de Paquetes</li> <li>Controlador (<code>Controller</code>)<ul> <li>Maneja las solicitudes HTTP y coordina la respuesta utilizando los servicios.</li> </ul> </li> <li>DTO (<code>Data Transfer Object</code>)<ul> <li>Define los objetos de transferencia de datos entre la capa de presentaci\u00f3n y la capa de negocio.</li> </ul> </li> <li>Mapper<ul> <li>Transforma los datos entre las entidades y los DTOs.</li> </ul> </li> <li>ExceptionHandler<ul> <li>Maneja las excepciones globales y proporciona respuestas de error estandarizadas.</li> </ul> </li> <li>Services<ul> <li>Contiene la l\u00f3gica de negocio del sistema.</li> </ul> </li> <li>Repositories<ul> <li>Interact\u00faa con la base de datos para realizar operaciones CRUD.</li> </ul> </li> <li>Seeder<ul> <li>Proporciona datos iniciales para la base de datos, como membres\u00edas y usuarios de prueba.</li> </ul> </li> <li>Enums<ul> <li>Define enumeraciones utilizadas en el sistema.</li> </ul> </li> <li> <p>Configuration</p> <ul> <li>Configura aspectos espec\u00edficos del sistema, como conexiones a la base de datos y seguridad.</li> </ul> </li> <li> <p>Flujo de Datos</p> </li> <li>El Controller recibe las solicitudes y llama a los Services.</li> <li>Los Services realizan la l\u00f3gica de negocio y utilizan los Repositories para interactuar con la base de datos.</li> <li>Los datos se transforman utilizando los Mapper y se env\u00edan al DTO.</li> <li>Los DTO se devuelven al Controller, que responde a la solicitud HTTP.</li> </ol>"},{"location":"desarrollo_mantenimiento/#procedimientos-para-la-actualizacion-del-sistema","title":"Procedimientos para la Actualizaci\u00f3n del Sistema","text":"<ol> <li>Actualizaci\u00f3n del Frontend (Angular)</li> <li>Obtener la \u00daltima Versi\u00f3n: Aseg\u00farate de tener la \u00faltima versi\u00f3n del c\u00f3digo fuente del frontend.</li> <li>Instalar Dependencias: Ejecuta <code>npm install</code> para instalar las dependencias actualizadas.</li> <li>Compilar y Construir: Ejecuta <code>ng build</code> para compilar el proyecto.</li> <li> <p>Desplegar: Copia los archivos generados en la carpeta <code>dist/</code> al servidor de producci\u00f3n.</p> </li> <li> <p>Actualizaci\u00f3n del Backend (Spring Boot)</p> </li> <li>Obtener la \u00daltima Versi\u00f3n: Aseg\u00farate de tener la \u00faltima versi\u00f3n del c\u00f3digo fuente del backend.</li> <li>Actualizar Dependencias: Actualiza las dependencias en el archivo <code>pom.xml</code> o <code>build.gradle</code>.</li> <li>Compilar y Construir: Ejecuta <code>mvn clean install</code> o <code>./gradlew build</code> para compilar el proyecto.</li> <li> <p>Desplegar: Despliega el archivo JAR o WAR generado al servidor de producci\u00f3n.</p> </li> <li> <p>Actualizaci\u00f3n de la Base de Datos</p> </li> <li>Migraciones de Flyway: Aseg\u00farate de que las migraciones de la base de datos est\u00e9n actualizadas.</li> <li> <p>Ejecutar Migraciones: Si es necesario, ejecuta las migraciones de Flyway para aplicar cambios en la base de datos.</p> </li> <li> <p>Verificaci\u00f3n y Pruebas</p> </li> <li>Verificar Funcionalidad: Realiza pruebas para verificar que el sistema funcione correctamente despu\u00e9s de la actualizaci\u00f3n.</li> <li>Corregir Errores: Resuelve cualquier error que aparezca durante las pruebas.</li> </ol>"},{"location":"despliegue/","title":"Despliegue de la Aplicaci\u00f3n SystemGYM (Spring Boot / Angular / MySQL)","text":"<p>Este documento explica c\u00f3mo desplegar la aplicaci\u00f3n SystemGYM, la cual tiene un backend en Spring Boot, un frontend en Angular, y utiliza MySQL como base de datos. Asumimos que ya cuentas con:</p> <ul> <li>El archivo <code>backend.jar</code> generado por Spring Boot.</li> <li>Los archivos de construcci\u00f3n (<code>build</code>) de Angular.</li> <li>La base de datos MySQL ya creada y configurada.</li> </ul>"},{"location":"despliegue/#1-requisitos-previos","title":"1. Requisitos Previos","text":"<p>Antes de comenzar, aseg\u00farate de que el servidor tenga instalados los siguientes programas:</p> <ul> <li>Java 11 o superior (JDK o JRE)</li> <li>Node.js (si decides servir el frontend con un servidor Node.js)</li> <li>Nginx o Apache (para servir los archivos est\u00e1ticos del frontend)</li> <li>MySQL (el servicio debe estar corriendo)</li> </ul>"},{"location":"despliegue/#2-configuracion-de-la-base-de-datos-mysql","title":"2. Configuraci\u00f3n de la Base de Datos MySQL","text":""},{"location":"despliegue/#asegurate-de-que-la-base-de-datos-mysql-este-corriendo-y-configurada-correctamente","title":"Aseg\u00farate de que la base de datos MySQL est\u00e9 corriendo y configurada correctamente:","text":"<ol> <li>Verifica que el servicio de MySQL est\u00e9 iniciado:    ```bash    sudo systemctl start mysql</li> </ol>"},{"location":"despliegue/#springdatasourceurljdbcmysqllocalhost3306systemgym_db","title":"spring.datasource.url=jdbc:mysql://localhost:3306/systemgym_db","text":""},{"location":"despliegue/#springdatasourceusernameusuario_mysql","title":"spring.datasource.username=usuario_mysql","text":""},{"location":"despliegue/#springdatasourcepasswordcontrasena_mysql","title":"spring.datasource.password=contrase\u00f1a_mysql","text":""},{"location":"despliegue/#springjpahibernateddl-autoupdate","title":"spring.jpa.hibernate.ddl-auto=update","text":"<ol> <li> <p>Despliegue del Backend (Spring Boot)</p> <ul> <li> <p>Sube el archivo backend.jar al servidor. Puedes hacerlo usando SCP o cualquier otro m\u00e9todo:</p> </li> <li> <p>bash</p> </li> </ul> </li> <li> <p>scp /ruta/local/backend.jar usuario@servidor:/ruta/remota/backend.jar</p> </li> </ol>"},{"location":"despliegue/#ejecuta-el-archivo-jar-en-el-servidor","title":"Ejecuta el archivo JAR en el servidor:","text":"<ul> <li>bash</li> </ul>"},{"location":"despliegue/#java-jar-rutaremotabackendjar","title":"java -jar /ruta/remota/backend.jar","text":"<ul> <li> <p>Ejecuta el JAR en segundo plano utilizando nohup para que el proceso contin\u00fae en ejecuci\u00f3n incluso si cierras la sesi\u00f3n SSH:</p> </li> <li> <p>bash</p> </li> </ul>"},{"location":"despliegue/#nohup-java-jar-rutaremotabackendjar-backendlog","title":"nohup java -jar /ruta/remota/backend.jar &gt; backend.log &amp;","text":""},{"location":"despliegue/#verifica-que-el-servidor-este-corriendo-accediendo-a-la-url","title":"Verifica que el servidor est\u00e9 corriendo accediendo a la URL:","text":"<p>bash</p> <ul> <li>http://:8080"},{"location":"despliegue/#despliegue-del-frontend-angular","title":"Despliegue del Frontend (Angular)","text":""},{"location":"despliegue/#opcion-1-servir-con-nginx","title":"Opci\u00f3n 1: Servir con Nginx","text":"<ul> <li> <p>Sube los archivos de construcci\u00f3n de Angular a la carpeta donde Nginx servir\u00e1 los archivos:</p> </li> <li> <p>bash</p> </li> <li> <p>scp -r /ruta/local/dist/angular/ usuario@servidor:/var/www/systemgym</p> </li> <li> <p>Configura Nginx para servir la aplicaci\u00f3n Angular. Edita el archivo de configuraci\u00f3n de Nginx:</p> </li> </ul> <p>bash</p> <ul> <li>sudo nano /etc/nginx/sites-available/default</li> </ul> <p>Configura el bloque server en Nginx:</p> <p>nginx</p> <p>server {     listen 80;     server_name ; <pre><code>location / {\n    root /var/www/systemgym;\n    index index.html;\n    try_files $uri $uri/ /index.html;\n}\n</code></pre> <p>}</p>"},{"location":"despliegue/#reinicia-nginx-para-aplicar-los-cambios","title":"Reinicia Nginx para aplicar los cambios:","text":"<p>bash</p> <ul> <li> <p>sudo systemctl restart nginx</p> </li> <li> <p>Verifica que el frontend est\u00e9 corriendo accediendo a la URL:</p> </li> </ul> <p>bash</p> <p>###  http:/// <ol> <li>Conexi\u00f3n entre Backend y Frontend</li> </ol> <p>Aseg\u00farate de que la API del backend est\u00e9 configurada correctamente en los archivos de configuraci\u00f3n de Angular, generalmente en environment.ts:</p> <p>export const environment = {   production: true,   apiUrl: 'http://:8080/api' }; <p>Si es necesario, ajusta las configuraciones CORS en el backend para permitir que el frontend se comunique con la API.</p>"},{"location":"despliegue/#reiniciar-nginx-si-realizas-algun-cambio-en-la-configuracion-de-nginx-asegurate-de-reiniciar-el-servicio","title":"Reiniciar Nginx: Si realizas alg\u00fan cambio en la configuraci\u00f3n de Nginx, aseg\u00farate de reiniciar el servicio:","text":"<pre><code>sudo systemctl restart nginx\n</code></pre> <ol> <li> <p>Consideraciones de Seguridad</p> <p>Configura un cortafuegos para limitar los puertos expuestos p\u00fablicamente (como 8080 para el backend o 80/443 para el frontend).</p> <p>Usa HTTPS: Si est\u00e1s desplegando en un entorno de producci\u00f3n, aseg\u00farate de configurar HTTPS utilizando certbot y Let's Encrypt en Nginx.</p> </li> </ol>"},{"location":"diagrama_clase/","title":"Diagrama de Clase de SystemGYM","text":"<p>Bienvenido al diagrama de clase del sistema SystemGYM. En este diagrama se ilustra la estructura de clases que conforman el sistema, detallando las relaciones y dependencias entre los diferentes componentes.</p>"},{"location":"diagrama_clase/#descripcion-del-diagrama","title":"Descripci\u00f3n del Diagrama","text":"<p>El diagrama de clases es una representaci\u00f3n visual de la arquitectura del sistema SystemGYM. Este diagrama facilita la comprensi\u00f3n de c\u00f3mo las clases interact\u00faan entre s\u00ed y c\u00f3mo se organizan dentro del sistema. Cada clase est\u00e1 representada con sus atributos y m\u00e9todos m\u00e1s importantes, as\u00ed como las relaciones que existen entre ellas, como asociaciones, herencias y dependencias.</p>"},{"location":"diagrama_clase/#visualizacion-del-diagrama","title":"Visualizaci\u00f3n del Diagrama","text":"<p>Puedes acceder al diagrama de clases completo en formato PDF haciendo clic en el siguiente enlace:</p> <p>\ud83d\udcc4 Ver el diagrama de clases en PDF</p> <p>Nota: Si prefieres descargar el PDF para revisarlo sin conexi\u00f3n, haz clic derecho en el enlace y selecciona \"Guardar enlace como...\"</p>"},{"location":"diagrama_er/","title":"Diagrama Entidad Relacion","text":""},{"location":"glosario/","title":"Glosario","text":""},{"location":"glosario/#glosario","title":"Glosario","text":""},{"location":"glosario/#angular","title":"Angular","text":"<p>Un framework de desarrollo para construir aplicaciones web modernas. Utiliza TypeScript y proporciona herramientas para crear aplicaciones web din\u00e1micas y escalables.</p>"},{"location":"glosario/#api-application-programming-interface","title":"API (Application Programming Interface)","text":"<p>Una interfaz que permite que diferentes aplicaciones se comuniquen entre s\u00ed. En este contexto, se refiere a las APIs RESTful que el frontend utiliza para interactuar con el backend.</p>"},{"location":"glosario/#base-de-datos","title":"Base de Datos","text":"<p>Un sistema de gesti\u00f3n de datos que almacena, organiza y facilita el acceso a los datos. En este sistema, se utiliza MySQL para manejar los datos del gimnasio.</p>"},{"location":"glosario/#dto-data-transfer-object","title":"DTO (Data Transfer Object)","text":"<p>Un objeto que se utiliza para transferir datos entre diferentes capas del sistema. Ayuda a simplificar y encapsular datos en una forma que es f\u00e1cil de usar en la comunicaci\u00f3n entre la capa de presentaci\u00f3n y la l\u00f3gica de negocio.</p>"},{"location":"glosario/#flyway","title":"Flyway","text":"<p>Una herramienta de migraci\u00f3n de bases de datos que permite gestionar y aplicar cambios a la estructura de la base de datos de manera ordenada y controlada.</p>"},{"location":"glosario/#jwt-json-web-token","title":"JWT (JSON Web Token)","text":"<p>Un est\u00e1ndar abierto para la autenticaci\u00f3n segura. Utiliza tokens codificados para verificar la identidad del usuario y gestionar el acceso a recursos en el sistema.</p>"},{"location":"glosario/#mvc-model-view-controller","title":"MVC (Model-View-Controller)","text":"<p>Un patr\u00f3n de dise\u00f1o de software que separa la aplicaci\u00f3n en tres componentes principales: Modelo (gesti\u00f3n de datos), Vista (interfaz de usuario) y Controlador (l\u00f3gica de negocio).</p>"},{"location":"glosario/#nodejs","title":"Node.js","text":"<p>Un entorno de ejecuci\u00f3n para JavaScript en el servidor. Permite ejecutar scripts de JavaScript fuera de un navegador web y es utilizado para construir aplicaciones web en el backend.</p>"},{"location":"glosario/#repositorio","title":"Repositorio","text":"<p>Una capa en el backend que maneja la persistencia de datos y proporciona m\u00e9todos para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en la base de datos.</p>"},{"location":"glosario/#service","title":"Service","text":"<p>En el contexto del backend, un servicio contiene la l\u00f3gica de negocio y se encarga de procesar las solicitudes del controlador y manipular datos mediante los repositorios.</p>"},{"location":"glosario/#spring-boot","title":"Spring Boot","text":"<p>Un framework de desarrollo basado en Java que facilita la creaci\u00f3n de aplicaciones empresariales. Proporciona una configuraci\u00f3n simplificada y herramientas para desarrollar aplicaciones robustas y escalables.</p>"},{"location":"glosario/#swagger","title":"Swagger","text":"<p>Una herramienta para documentar y probar APIs RESTful. Permite a los desarrolladores explorar y verificar las APIs del sistema a trav\u00e9s de una interfaz gr\u00e1fica.</p>"},{"location":"glosario/#typescript","title":"TypeScript","text":"<p>Un superconjunto de JavaScript que a\u00f1ade tipos est\u00e1ticos y otras caracter\u00edsticas a JavaScript, proporcionando un desarrollo m\u00e1s seguro y escalable de aplicaciones web.</p>"},{"location":"glosario/#adminlte","title":"AdminLTE","text":"<p>Una plantilla de administraci\u00f3n de c\u00f3digo abierto que proporciona una interfaz de usuario moderna y receptiva para aplicaciones web.</p>"},{"location":"glosario/#seeder","title":"Seeder","text":"<p>Un componente en el backend que se utiliza para inicializar la base de datos con datos predeterminados, como usuarios de prueba y configuraciones iniciales.</p>"},{"location":"glosario/#exceptionhandler","title":"ExceptionHandler","text":"<p>Un componente en Spring Boot que se encarga de manejar y procesar excepciones globalmente, proporcionando respuestas de error coherentes y manejables.</p>"},{"location":"historiasusuario/","title":"Historias de usuario","text":""},{"location":"historiasusuario/#casos-de-uso-extendido","title":"Casos de uso extendido","text":""},{"location":"historiasusuario/#primer-caso-de-uso-extendido-ingreso-a-la-pagina-web","title":"Primer caso de uso extendido, Ingreso a la pagina web","text":""},{"location":"historiasusuario/#segundo-caso-de-uso-extendido-crear-una-membresia","title":"Segundo caso de uso extendido, Crear una membresia","text":""},{"location":"historiasusuario/#historias-de-usuario","title":"Historias de usuario","text":""},{"location":"historiasusuario/#historia-de-usuario-crear-membresia","title":"Historia de Usuario - Crear Membres\u00eda","text":"Item Descripci\u00f3n ID HU-1 Rol Administrador Caracter\u00edstica / Funcionalidad Crear membres\u00eda Raz\u00f3n/Resultado Permite crear o editar diferentes tipos de membres\u00edas"},{"location":"historiasusuario/#hu-1-criterios-de-aceptacion","title":"HU-1 - Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Listar las membres\u00edas Visualizar las membres\u00edas Men\u00fa Membres\u00edas Listar las membres\u00edas Mostrar todas las membres\u00edas en el sistema 2. Crear membres\u00eda Crear nueva membres\u00eda Men\u00fa Crear Crear membres\u00eda Mostrar formulario de creaci\u00f3n de membres\u00eda 3. Editar membres\u00eda Editar membres\u00eda Bot\u00f3n Editar Editar membres\u00eda Mostrar formulario con los datos de la membres\u00eda seleccionada y al presionar el boton de guardar debe actualizar los datos de la membresia"},{"location":"historiasusuario/#cumplimiento-punto-1","title":"Cumplimiento punto 1","text":""},{"location":"historiasusuario/#cumplimiento-punto-2","title":"Cumplimiento punto 2","text":""},{"location":"historiasusuario/#cumplimiento-punto-3","title":"Cumplimiento punto 3","text":""},{"location":"historiasusuario/#historia-de-usuario-inscribir-cliente","title":"Historia de Usuario - Inscribir cliente","text":"Item Descripci\u00f3n ID HU-2 Rol Administrador Caracter\u00edstica / Funcionalidad Inscribir Cliente Raz\u00f3n/Resultado Permite inscribir clientes al sistema y guardarlos en BD"},{"location":"historiasusuario/#hu-2-criterios-de-aceptacion","title":"HU-2  - Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Inscribir al cliente Cliente inscrito en bd y en la lista Men\u00fa Inscripcion Inscribir cliente Cliente inscrito en el sistema 2. Factura generada Factura de inscripcion visualizable y descargable Men\u00fa Inscripcion Inscribir cliente correctamente Factura descargada"},{"location":"historiasusuario/#cumplimiento-punto-1_1","title":"Cumplimiento punto 1","text":""},{"location":"historiasusuario/#cumplimiento-punto-2_1","title":"Cumplimiento punto 2","text":""},{"location":"historiasusuario/#historia-de-usuario-suscribir-cliente","title":"Historia de Usuario - Suscribir cliente","text":"Item Descripci\u00f3n ID HU-3 Rol Administrador Caracter\u00edstica / Funcionalidad Suscribir cliente a una membresia Raz\u00f3n/Resultado Permite suscribir un cliente a una membresia para que pueda acceder al gimnasio y a distintas partes con esa membresia y que se le facture por el periodo de dicha membresia"},{"location":"historiasusuario/#hu-3-criterios-de-aceptacion","title":"HU-3 - Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Cliente suscrito a la membresia Cliente inscrito a la membresia que eligio y con factura pendiente Men\u00fa Suscripcion Suscribir a un cliente Cliente inscrito a la membresia y con factura en base de datos"},{"location":"historiasusuario/#cumplimiento-punto-1_2","title":"Cumplimiento punto 1","text":""},{"location":"historiasusuario/#historia-de-usuario-pagar-una-factura","title":"Historia de Usuario - Pagar una factura","text":"Item Descripci\u00f3n ID HU-4 Rol Administrador Caracter\u00edstica / Funcionalidad Realizar un pago a una factura Raz\u00f3n/Resultado Permite realizar pagos a las facturas pendientes de los clientes"},{"location":"historiasusuario/#hu-4-criterios-de-aceptacion","title":"HU-4- Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Factura pagada completamente La factura pagada debe cambiar de estatus y se visualizar el pago en la lista Men\u00fa Pagos Pagar una factura Pago guardado en base de datos y factura cambiada de status 2. Listado de pagos Se deben listar los pagos realizados Men\u00fa Pagos Tocar el boton de Listar Pagos Lista de pagos listada en una tabla"},{"location":"historiasusuario/#cumplimiento-punto-1_3","title":"Cumplimiento punto 1","text":"<p>## Cumplimiento punto 2</p> <p></p> <p># Historia de Usuario - Registrar Egreso</p> Item Descripci\u00f3n ID HU-5 Rol Administrador Caracter\u00edstica / Funcionalidad Registrar los egresos del gimnasio    y eliminarlos Raz\u00f3n/Resultado Permite registrar los egresos de dinero del gimnasio, los gastos y tambien eliminarlos en caso de error"},{"location":"historiasusuario/#hu-5-criterios-de-aceptacion","title":"HU-5 - Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Egreso registrado en bd El egreso debe ser guardado en base de datos Men\u00fa Egresos Registrar Egreso Egreso creado en base de datos con la fecha actual 2. Listado de egresos Se deben listar los egresos registrados Men\u00fa Egresos Tocar el boton de Listar Egresos Lista de egresos listada en una tabla 3. Eliminar egreso Se debe eliminar el egreso del sistema Men\u00fa Egresos Tocar el boton de eliminar y confirmar de la tabla Egreso eliminado del sistema"},{"location":"historiasusuario/#cumplimiento-punto-1_4","title":"Cumplimiento punto 1","text":""},{"location":"historiasusuario/#cumplimiento-punto-2_2","title":"Cumplimiento punto 2","text":"<p>## Cumplimiento punto 3   </p> <p># Historia de Usuario - Modificar tarifas</p> Item Descripci\u00f3n ID HU-6 Rol Administrador Caracter\u00edstica / Funcionalidad Modificar las tarifas de los costos del sistema Raz\u00f3n/Resultado Permite modificar los precios de las tarifas de las distintas tarifas del sistema"},{"location":"historiasusuario/#hu-6-criterios-de-aceptacion","title":"HU-6 - Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Tarifa con valor modificado La tarifa debe modificarse y las proximas facturas deben salir con el nuevo valor de la tarifa Men\u00fa Tarifas Registrar Egreso Tarifa con valor modificado"},{"location":"historiasusuario/#cumplimiento-punto-1_5","title":"Cumplimiento punto 1","text":"<p># Historia de Usuario - Reportes Ingreso/Egreso</p> Item Descripci\u00f3n ID HU-7 Rol Administrador Caracter\u00edstica / Funcionalidad Visualizar egresos y ingresos de una determinada fecha Raz\u00f3n/Resultado Se deben poder visualizar en una tabla todos los ingresos y egresos de un determinado dia"},{"location":"historiasusuario/#hu-7-criterios-de-aceptacion","title":"HU-7- Criterios de Aceptaci\u00f3n","text":"Escenario Criterio de Aceptaci\u00f3n Contexto Evento Resultado Esperado 1. Tabla listada con los egresos y ingresos del dia seleccionado Se deben poder visualizar los egresos por un lado y los egresos por el otro Men\u00fa Reportes/Ingreso-Egreso Visualizar Ingreso/Egreso Tabla con los datos de los ingresos y egresos"},{"location":"historiasusuario/#cumplimiento-punto-1_6","title":"Cumplimiento punto 1","text":""},{"location":"instalacion/","title":"Instalacion","text":""},{"location":"instalacion/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"instalacion/#instrucciones-para-la-instalacion-del-sistema","title":"Instrucciones para la Instalaci\u00f3n del Sistema","text":"<ol> <li>Preparar el Entorno</li> <li> <p>Aseg\u00farate de que todos los prerequisitos est\u00e9n instalados (Java 17, Node.js, Angular CLI, MySQL, etc.).</p> </li> <li> <p>Clonar el Repositorio</p> </li> <li>Clona el repositorio del proyecto desde el sistema de control de versiones (por ejemplo, GitHub):      <code>bash      git clone https://github.com/geordym/backend-systemgym</code></li> <li> <p>Accede al directorio del proyecto:      <code>bash      cd backend-systemgym</code></p> </li> <li> <p>Configurar la Base de Datos</p> </li> <li>Crea una base de datos en MySQL para el sistema, la BD por default debera llamarse \"sistema_gimnasio\"</li> <li> <p>No necesitas importar ningun SQL, el sistema implementa flyway en su funcionamiento y este se encarga de inyectar todo lo necesario en la base de datos para su funcionamiento</p> </li> <li> <p>Configurar el Backend</p> </li> <li>Abre el archivo <code>application.properties</code> en el directorio <code>src/main/resources</code>.</li> <li> <p>Configura las propiedades de la base de datos, el servidor de correo y otros par\u00e1metros necesarios:      ```properties</p> <ul> <li>spring.datasource.url=jdbc:mysql://localhost:3306/sistema_gimnasio</li> <li>spring.datasource.username=your_db_username</li> <li>spring.datasource.password=your_db_password</li> <li>spring.mail.host=smtp.gmail.com</li> <li>spring.mail.port=587</li> <li>spring.mail.username=your_email@gmail.com</li> <li>spring.mail.password=your_email_password  ```</li> </ul> </li> <li> <p>Configurar el Frontend</p> </li> <li>Abre el archivo <code>src/environments/environment.ts</code> (o <code>environment.prod.ts</code> para producci\u00f3n).</li> <li>Configura la URL del backend:      <code>typescript      export const environment = {        production: false,        apiUrl: 'http://localhost:8080/api'      };</code></li> </ol>"},{"location":"instalacion/#instalacion-de-dependencias","title":"Instalaci\u00f3n de Dependencias","text":"<ol> <li>Backend</li> <li>Navega al directorio del backend y aseg\u00farate de que Maven est\u00e9 instalado.</li> <li> <p>Instala las dependencias del backend con el siguiente comando:      <code>bash      ./mvnw install</code></p> </li> <li> <p>Frontend</p> </li> <li>Navega al directorio del frontend.</li> <li>Instala las dependencias de Angular utilizando npm:      <code>bash      npm install</code></li> </ol>"},{"location":"instalacion/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":"<ol> <li>Iniciar el Backend</li> <li>Navega al directorio del backend (<code>/backend_systemgym</code>) y ejecuta el siguiente comando para iniciar el servidor Spring Boot:      <code>bash      ./mvnw spring-boot:run</code></li> <li> <p>Verifica que el servidor est\u00e9 funcionando accediendo a <code>http://localhost:8080</code>.</p> </li> <li> <p>Iniciar el Frontend</p> </li> <li>Navega al directorio del frontend (<code>/frontend_systemgym</code>) y ejecuta el siguiente comando para iniciar el servidor de desarrollo Angular:      <code>bash      ng serve</code></li> <li>Accede a la aplicaci\u00f3n en <code>http://localhost:4200</code>.</li> </ol>"},{"location":"introduccion/","title":"Introducci\u00f3n","text":"<p>SystemGYM es un sistema integral dise\u00f1ado para facilitar la gesti\u00f3n administrativa de gimnasios. Su objetivo principal es optimizar y automatizar procesos relacionados con la inscripci\u00f3n de clientes, manejo de membres\u00edas, control de pagos, generaci\u00f3n de facturas y gesti\u00f3n de accesos. La aplicaci\u00f3n ha sido desarrollada pensando en la eficiencia, facilidad de uso y escalabilidad, adapt\u00e1ndose a las necesidades de diferentes tipos de gimnasios.</p> <p>Este sistema est\u00e1 construido utilizando tecnolog\u00edas modernas como Spring Boot para el backend y Angular para el frontend, ofreciendo una interfaz intuitiva para los usuarios y una estructura robusta para los administradores del sistema.</p>"},{"location":"introduccion/#funcionalidades-principales","title":"Funcionalidades Principales:","text":"<ul> <li>Gesti\u00f3n de membres\u00edas: Permite crear, editar y eliminar membres\u00edas, as\u00ed como gestionar sus precios y duraciones.</li> <li>Control de suscripciones: Facilita la suscripci\u00f3n de clientes a membres\u00edas, generando facturas y controlando el tiempo de vigencia.</li> <li>Facturaci\u00f3n autom\u00e1tica: Sistema de generaci\u00f3n autom\u00e1tica de facturas y control de pagos.</li> <li>Acceso de clientes: Gesti\u00f3n de la entrada y salida de los clientes del gimnasio.</li> <li>Reportes y estad\u00edsticas: Generaci\u00f3n de reportes que permiten una mejor toma de decisiones y control de los datos del gimnasio.</li> </ul>"},{"location":"introduccion/#objetivo-del-manual","title":"Objetivo del Manual","text":"<p>Este manual tiene como prop\u00f3sito guiar a los usuarios y administradores del sistema en la correcta instalaci\u00f3n, configuraci\u00f3n, y operaci\u00f3n de SystemGYM. Adem\u00e1s, proporciona informaci\u00f3n t\u00e9cnica para mantener y actualizar el sistema, asegurando su \u00f3ptimo funcionamiento en entornos de producci\u00f3n.</p>"},{"location":"introduccion/#estructura-del-manual","title":"Estructura del Manual","text":"<p>El manual se organiza en secciones que cubren los siguientes aspectos: 1. Requisitos del sistema. 2. Gu\u00eda de instalaci\u00f3n y configuraci\u00f3n. 3. Descripci\u00f3n detallada de los m\u00f3dulos y funcionalidades. 4. Procedimientos de mantenimiento y actualizaci\u00f3n. 5. Resoluci\u00f3n de problemas comunes.</p> <p>Este manual ha sido desarrollado por los estudiantes de la formaci\u00f3n ADSO del SENA, ficha 2675809, como parte del proyecto productivo.</p>"},{"location":"prerequisitos/","title":"Prerequisitos","text":""},{"location":"prerequisitos/#prerequisitos","title":"Prerequisitos","text":"<p>Para poder ejecutar y desarrollar SystemGYM, es necesario cumplir con los siguientes prerequisitos:</p>"},{"location":"prerequisitos/#1-entorno-de-desarrollo","title":"1. Entorno de Desarrollo","text":"<ul> <li>Java 17: Aseg\u00farate de tener instalado JDK 17 para compilar y ejecutar el backend hecho en Spring Boot.</li> </ul> <ul> <li>Angular 16: La aplicaci\u00f3n frontend est\u00e1 desarrollada en Angular 16. Necesitar\u00e1s Node.js y Angular CLI instalados.</li> </ul> <ul> <li>Node.js: Versi\u00f3n 14 o superior.</li> </ul> <ul> <li>Angular CLI: Instalaci\u00f3n global con <code>npm install -g @angular/cli</code>.</li> </ul>"},{"location":"prerequisitos/#2-base-de-datos","title":"2. Base de Datos","text":"<ul> <li>MySQL: </li> <li>Versi\u00f3n 8.0 o superior.</li> <li> <p>Configura una base de datos para el sistema y aseg\u00farate de tener las credenciales a mano para configurar la conexi\u00f3n en Spring Boot.</p> <p></p> </li> </ul>"},{"location":"prerequisitos/#3-autenticacion-y-seguridad","title":"3. Autenticaci\u00f3n y Seguridad","text":"<ul> <li>JWT (JSON Web Tokens): El sistema utiliza JWT para la autenticaci\u00f3n de usuarios, por lo que es importante configurar los tokens y claves secretas correctamente en el backend.</li> </ul> <p>La configuracion de esta clave se hace en el archivo application.properties modificando la propiedad SECRET_KEY</p>"},{"location":"prerequisitos/#4-integracion-de-email","title":"4. Integraci\u00f3n de Email","text":"<ul> <li> <p>Gmail SMTP: La aplicaci\u00f3n est\u00e1 configurada para enviar correos electr\u00f3nicos utilizando Gmail. Aseg\u00farate de tener configuradas las credenciales correctas en Spring Boot, para poder utilizar tu correo electronico para enviar mensajes debes tener tu correo y la contrase\u00f1a de aplicacion que provee gmail.</p> <p></p> </li> </ul>"},{"location":"prerequisitos/#5-impresion-de-tickets","title":"5. Impresi\u00f3n de Tickets","text":"<ul> <li> <p>Impresora T\u00e9rmica: El sistema soporta la impresi\u00f3n de tickets a trav\u00e9s de una impresora t\u00e9rmica. Aseg\u00farate de tener instalada y configurada una impresora compatible, de 58mm.</p> <p></p> </li> </ul>"},{"location":"prerequisitos/#6-dependencias-adicionales","title":"6. Dependencias Adicionales","text":"<ul> <li>Maven: Para manejar las dependencias en el proyecto Spring Boot.</li> <li>npm: Para manejar las dependencias del proyecto Angular.</li> </ul>"},{"location":"prerequisitos/#7-entorno-de-ejecucion","title":"7. Entorno de Ejecuci\u00f3n","text":"<ul> <li>Servidor de Aplicaciones: Un servidor como Tomcat para desplegar el backend de Spring Boot.</li> <li>Navegador Web: Cualquier navegador moderno para acceder a la aplicaci\u00f3n frontend.</li> </ul>"}]}